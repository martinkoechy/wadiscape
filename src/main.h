/* *  main.h *  Landschaft * *  Created by Forschung on Tue Jun 20 2006. *  Copyright (c) 2006 Martin Koechy. All rights reserved. * */#include <cstdlib>#include <iostream>#include <fstream>#include <valarray>#include "rng.h"#ifndef MARTIN_MAIN_H#define MARTIN_MAIN_Htypedef unsigned int uint32; //	typedef unsigned long int uint32; // use the latter if 'int' is too shorttypedef unsigned short ushort; const float max_ann_mass_kg_cell = 150; // kg/25m2const float feed_demand_kg_LSU_ha_d = 10.0; // FAO  standardconst int years_0 = 40;const int years_CT = 30; // 1961-1990const int years_trans = 60; // 1991 - 2050const int years_scen = 10; // 2071-2100const float cell_length_m = 5.0; ///< length (m) of the edge of one cellconst float cell_area_m2 = 25.0;const float pi = 3.1416; ///< πconst unsigned short days_in_year = 365; const float _g = 9.81; // Erdbeschleunigung, 9.81 m/s²// constants for run-time optimizationconst float pi2 = 2*pi;const float q1_6 = 1.0/6.0;    // Laufzeitoptimierungconst float q1_3 = 1.0/3.0;   // Laufzeitoptimierungconst float q2_3 = 2.0/3.0;   // Laufzeitoptimierungconst float q1_3600= 1.0/3600.0;// Laufzeitoptimierungconst float q1_365 = 1.0/float(days_in_year);const float q1_360 = 1.0/360;const float q1_cell_area_m2 = 1.0/cell_area_m2;const float gROOT = sqrtf(_g);const float qpi2_360 = pi2/360.0;const float q1_pi = 1.0/pi;const float qpi_3 = pi/3.0;const bool xst = false; // enables additional statistics outputextern RNG* zZzo;template <class T> const T& max(const T& a, const T&b) {return (a<b) ? b: a;}template <class T> const T& min(const T& a, const T&b) {return (a<b) ? a: b;}inline int signum(float i){  return (i>0)?1:((i<0)?-1:0);}enum habitat_names {South_f, North_f, Plateau, Wadi}; // 1 ... 4 laut Definition in LandscapeCreatorenum month_names {Aug, Sep, Oct, Nov, Dec, Jan, Feb, Mar, Apr, May, Jun, Jul};inline std::ostream & operator<< (std::ostream & s, const habitat_names & h){  switch(h)  {	case South_f: s << 'S'; break;	case North_f: s << 'N'; break;	case Plateau: s << 'P'; break;	case Wadi:    s << 'W'; break;  }}enum climate_names {arid, semiarid, drymed, typmed, mesicmed};inline climate_names & operator++ (climate_names & c){ return c = climate_names(int(c)+1);}inline std::ostream & operator<< (std::ostream & s, const climate_names & c){  switch(c)  {	case arid:		s << "arid"; break;	case semiarid:  s << "semiarid"; break;	case drymed:	s << "drymed"; break;	case typmed:   s << "typmed"; break;	case mesicmed:  s << "mesicmed"; break;  }  return s;}enum scenario_names {CT, A2, A1B, B2, DD, EE, FF, GG, HH, II};inline scenario_names & operator++ (scenario_names & s){ return s = scenario_names(int(s)+1);}inline std::ostream & operator<< (std::ostream & s, const scenario_names & sn){  switch(sn)  {	case CT:  s << "CT"; break;	case A2:  s << "A2"; break;	case A1B:  s << "A1B"; break;	case B2:  s << "B2"; break;	case DD:  s << "DD"; break;	case EE:  s << "EE"; break;	case FF:  s << "FF"; break;	case GG:  s << "GG"; break;	case HH:  s << "HH"; break;	case II:  s << "II"; break;  }  return s;}inline double z01 (void){  return zZzo->rand_halfclosed01();}#endif