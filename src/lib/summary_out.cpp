/* *  summary_out.cpp *  MKLandscape * *  Created by Forschung on Sun Jun 25 2006. *  Copyright (c) 2006 Martin Koechy. All rights reserved. * */#include <cmath>#include "summary_out.h"extern long N_cells, S_cells, W_cells, P_cells;extern const bool xst;extern int NZ, NS;void annual_summary_output(int ll, climate_names cc, int yy, float LSU_km2, float rain, scenario_names scenario, const char* file_name){  std::ofstream ann_stats (file_name, std::ios_base::app);  //------ summary statistics  //std::cout.precision(3);  ann_stats <<ll << "\t" << scenario << "\t" << cc << "\t" << float(LSU_km2/100.0) << "\t" << 1961-years_0+yy << "\t" << rain << "\t";  float d = LSU_km2/100.0 * feed_demand_kg_LSU_ha_d * days_in_year * cell_area_m2/10000.0; // annual demand/cell, corrected 20060825  float N_mean_veg_cov_after = VEGETATION::N_veg_cov.sum()/float(N_cells);VEGETATION::N_veg_cov -= N_mean_veg_cov_after;float N_mean_ann_mass_after = VEGETATION::N_ann_mass.sum()/float(N_cells);VEGETATION::N_ann_mass -= N_mean_ann_mass_after;float N_mean_ann_cov_after = VEGETATION::N_ann_cov.sum()/float(N_cells);VEGETATION::N_ann_cov -= N_mean_ann_cov_after;float N_mean_shrub_cov_after = VEGETATION::N_shrub_cov.sum()/float(N_cells);VEGETATION::N_shrub_cov -= N_mean_shrub_cov_after;ann_stats << VEGETATION::sum_veg_mass/float(NZ*NS)*400 << "\t"; // kg/cell * 400 = kg/haann_stats << (d?VEGETATION::sum_mass_consumed/(float(N_cells)*d):1) << "\t"; ann_stats << N_mean_veg_cov_after << "\t";ann_stats << N_mean_ann_mass_after*400 << "\t"<< N_mean_ann_cov_after << "\t"; //kg/cell * 400 = kg/haann_stats << N_mean_shrub_cov_after << "\t"; ann_stats << N_cells << "\t" << VEGETATION::N_veg_cells/float(N_cells) << "\t" << VEGETATION::N_ann_cells/float(N_cells) << "\t" << VEGETATION::N_shrub_cells/float(N_cells) << "\t" << VEGETATION::N_bare_cells/float(N_cells) << "\t";if (xst){  std::valarray <float> N_temp = VEGETATION::N_veg_cov * VEGETATION::N_veg_cov;  float N_sd_veg_cov_after = pow(N_temp.sum()/float(N_cells-1), 0.5f);  N_temp = VEGETATION::N_ann_mass * VEGETATION::N_ann_mass;  float N_sd_ann_mass_after = pow(N_temp.sum()/float(N_cells-1), 0.5f);    N_temp = VEGETATION::N_ann_cov * VEGETATION::N_ann_cov;  float N_sd_ann_cov_after = pow(N_temp.sum()/float(N_cells-1), 0.5f);    N_temp = VEGETATION::N_shrub_cov * VEGETATION::N_shrub_cov;  float N_sd_shrub_cov_after = pow(N_temp.sum()/float(N_cells-1), 0.5f);    ann_stats << N_sd_veg_cov_after << "\t" << N_sd_ann_mass_after*400 << "\t" << N_sd_ann_cov_after << "\t" << N_sd_shrub_cov_after << "\t";}float W_mean_veg_cov_after = VEGETATION::W_veg_cov.sum()/float(W_cells);VEGETATION::W_veg_cov -= W_mean_veg_cov_after;float W_mean_ann_mass_after = VEGETATION::W_ann_mass.sum()/float(W_cells);VEGETATION::W_ann_mass -= W_mean_ann_mass_after;float W_mean_ann_cov_after = VEGETATION::W_ann_cov.sum()/float(W_cells);VEGETATION::W_ann_cov -= W_mean_ann_cov_after;float W_mean_shrub_cov_after = VEGETATION::W_shrub_cov.sum()/float(W_cells);VEGETATION::W_shrub_cov -= W_mean_shrub_cov_after;ann_stats << VEGETATION::W_sum_veg_mass/float(W_cells)*400 << "\t";ann_stats << (d?VEGETATION::W_sum_mass_consumed/(float(W_cells)*d):1) << "\t"; ann_stats << W_mean_veg_cov_after << "\t";ann_stats << W_mean_ann_mass_after*400 << "\t"<< W_mean_ann_cov_after << "\t";ann_stats << W_mean_shrub_cov_after << "\t"; ann_stats << W_cells << "\t" << VEGETATION::W_veg_cells/float(W_cells) << "\t" << VEGETATION::W_ann_cells/float(W_cells) << "\t" << VEGETATION::W_shrub_cells/float(W_cells) << "\t" << VEGETATION::W_bare_cells/float(W_cells) << "\t";if (xst){  std::valarray <float> W_temp = VEGETATION::W_veg_cov * VEGETATION::W_veg_cov;  float W_sd_veg_cov_after = pow(W_temp.sum()/float(W_cells-1), 0.5f);    W_temp = VEGETATION::W_ann_mass * VEGETATION::W_ann_mass;  float W_sd_ann_mass_after = pow(W_temp.sum()/float(W_cells-1), 0.5f);    W_temp = VEGETATION::W_ann_cov * VEGETATION::W_ann_cov;  float W_sd_ann_cov_after = pow(W_temp.sum()/float(W_cells-1), 0.5f);    W_temp = VEGETATION::W_shrub_cov * VEGETATION::W_shrub_cov;  float W_sd_shrub_cov_after = pow(W_temp.sum()/float(W_cells-1), 0.5f);      ann_stats << W_sd_veg_cov_after << "\t" << W_sd_ann_mass_after*400 << "\t" << W_sd_ann_cov_after << "\t" << W_sd_shrub_cov_after << "\t";}float S_mean_veg_cov_after = VEGETATION::S_veg_cov.sum()/float(S_cells);VEGETATION::S_veg_cov -= S_mean_veg_cov_after;float S_mean_ann_mass_after = VEGETATION::S_ann_mass.sum()/float(S_cells);VEGETATION::S_ann_mass -= S_mean_ann_mass_after;float S_mean_ann_cov_after = VEGETATION::S_ann_cov.sum()/float(S_cells);VEGETATION::S_ann_cov -= S_mean_ann_cov_after;float S_mean_shrub_cov_after = VEGETATION::S_shrub_cov.sum()/float(S_cells);VEGETATION::S_shrub_cov -= S_mean_shrub_cov_after;ann_stats << VEGETATION::S_sum_veg_mass/float(S_cells)*400 << "\t";ann_stats << (d?VEGETATION::S_sum_mass_consumed/(float(S_cells)*d):1) << "\t"; ann_stats << S_mean_veg_cov_after << "\t";ann_stats << S_mean_ann_mass_after*400 << "\t"<< S_mean_ann_cov_after << "\t";ann_stats << S_mean_shrub_cov_after << "\t"; ann_stats << S_cells << "\t" << VEGETATION::S_veg_cells/float(S_cells) << "\t" << VEGETATION::S_ann_cells/float(S_cells) << "\t" << VEGETATION::S_shrub_cells/float(S_cells) << "\t" << VEGETATION::S_bare_cells/float(S_cells) << "\t";if (xst){  std::valarray <float> S_temp = VEGETATION::S_veg_cov * VEGETATION::S_veg_cov;  float S_sd_veg_cov_after = pow(S_temp.sum()/float(S_cells-1), 0.5f);    S_temp = VEGETATION::S_ann_mass * VEGETATION::S_ann_mass;  float S_sd_ann_mass_after = pow(S_temp.sum()/float(S_cells-1), 0.5f);    S_temp = VEGETATION::S_ann_cov * VEGETATION::S_ann_cov;  float S_sd_ann_cov_after = pow(S_temp.sum()/float(S_cells-1), 0.5f);    S_temp = VEGETATION::S_shrub_cov * VEGETATION::S_shrub_cov;  float S_sd_shrub_cov_after = pow(S_temp.sum()/float(S_cells-1), 0.5f);      ann_stats << S_sd_veg_cov_after << "\t" << S_sd_ann_mass_after*400 << "\t" << S_sd_ann_cov_after << "\t" << S_sd_shrub_cov_after << "\t";}float P_mean_veg_cov_after = VEGETATION::P_veg_cov.sum()/float(P_cells);VEGETATION::P_veg_cov -= P_mean_veg_cov_after;float P_mean_ann_mass_after = VEGETATION::P_ann_mass.sum()/float(P_cells);VEGETATION::P_ann_mass -= P_mean_ann_mass_after;float P_mean_ann_cov_after = VEGETATION::P_ann_cov.sum()/float(P_cells);VEGETATION::P_ann_cov -= P_mean_ann_cov_after;float P_mean_shrub_cov_after = VEGETATION::P_shrub_cov.sum()/float(P_cells);VEGETATION::P_shrub_cov -= P_mean_shrub_cov_after;ann_stats << VEGETATION::P_sum_veg_mass/float(P_cells)*400 << "\t";ann_stats << (d?VEGETATION::P_sum_mass_consumed/(float(P_cells)*d):1) << "\t"; ann_stats << P_mean_veg_cov_after << "\t";ann_stats << P_mean_ann_mass_after*400 << "\t"<< P_mean_ann_cov_after << "\t";ann_stats << P_mean_shrub_cov_after << "\t"; ann_stats << P_cells << "\t" << VEGETATION::P_veg_cells/float(P_cells) << "\t" << VEGETATION::P_ann_cells/float(P_cells) << "\t" << VEGETATION::P_shrub_cells/float(P_cells) << "\t" << VEGETATION::P_bare_cells/float(P_cells);if (xst){  std::valarray <float> P_temp = VEGETATION::P_veg_cov * VEGETATION::P_veg_cov;  float P_sd_veg_cov_after = pow(P_temp.sum()/float(P_cells-1), 0.5f);    P_temp = VEGETATION::P_ann_mass * VEGETATION::P_ann_mass;  float P_sd_ann_mass_after = pow(P_temp.sum()/float(P_cells-1), 0.5f);    P_temp = VEGETATION::P_ann_cov * VEGETATION::P_ann_cov;  float P_sd_ann_cov_after = pow(P_temp.sum()/float(P_cells-1), 0.5f);    P_temp = VEGETATION::P_shrub_cov * VEGETATION::P_shrub_cov;  float P_sd_shrub_cov_after = pow(P_temp.sum()/float(P_cells-1), 0.5f);      ann_stats << "\t";  ann_stats << P_sd_veg_cov_after << "\t" << P_sd_ann_mass_after*400 << "\t" << P_sd_ann_cov_after << "\t" << P_sd_shrub_cov_after;}  ann_stats << std::endl;ann_stats.close();}void annual_spatial_output(int ll, climate_names cc, int yy, float LSU_km2, float rain, scenario_names scen, 						   const char* file_name, WATER* W, VEGETATION* V) // new v. 3.2.1{  std::ofstream row_stats (file_name, std::ios_base::app);  float ac = 0.0; // temporary variable for annnual cover  float sc = 0.0; // temporary variable for shrub cover		  for(int is = 0; is<NS; is++)  { 	for(int iz = 0; iz<NZ; iz++)	  {		ac = V[iz*NZ+is].get_ann_cover();	  sc = V[iz*NZ+is].get_shrub_cover();	row_stats << iz << "\t" << is << "\t" << yy << "\t" << rain<< "\t" << ac << "\t" << sc << "\t" << ac*sc << std::endl;	}  }}void one_year_spatial_output(int ll, climate_names cc, int yy, float LSU_km2, float rain, scenario_names scen, 							 const char* file_name, WATER* W, VEGETATION* V) // new v. 3.2.1{  std::ofstream row_stats (file_name, std::ios_base::app);//  float ac = 0.0; // temporary variable for annnual cover//  float sc = 0.0; // temporary variable for shrub cover    for(int is = 0; is<NS; is++)	for(int iz = 0; iz<NZ; iz++)	{	  row_stats << iz << "\t" << is << "\t" <<ll << "\t" << scen << "\t" << cc << "\t" << float(LSU_km2/100.0) << "\t" << rain << "\t";	row_stats <<  W[iz*NZ+is].habitat << "\t" << W[iz*NZ+is].avail_rel << "\t";		row_stats << V[iz*NZ+is].ann_mass_kg_cell/25.0 << "\t" << 4.0*V[iz*NZ+is].shrub_cov/25.0 << std::endl;	  	}}