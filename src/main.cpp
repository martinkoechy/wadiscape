/*Version 3.1 Adaptation for B2 climate change scenario based on data provided by Andreas Heckl, Kassel. The original data had a resolution of 18 square kilometers. Version 3.2 Uses climate change scenarios CT, A2, B2 based on data provided by Alpert et al. Version 3.2.1 Spatial output added: summaries for each row of cells parallel to the wadiVersion 3.2.2 [Improved function for calculation of seed production of annuals in cell.cpp:prod_seeds().] New parameters retained but new function removed - biomass was less than half!!!  Rearranged output order of columns. SD of production is output only when requested.  20070519: cosmetic changes to output. The statistics are now a function that can be calculated before or after grazing (in year.cpp). The appropriate column title can be changed by redefining " << when << " Version 3.2.3 Version for transient climate change scenarios (A2, 50 km, Garmisch) 20070702: changed food demand from 10.0 to 13.5 kg/LSU/d; simulations run only to year 2050; rain is read from a file 20070705: wadiscape ID and slope can now be passed as parameters to the programme at startup; 20070706: output is separated into one file with column headers and a 2nd file with data; rain series are now drawn with each new LSU parameter to increase variabilityVersion 3.2.4 Rain series read from daily data, a random year is chosen from the series within a moving window of x years. New transition probabilites for herb growth and seed production. Food demand back to 10.0 kg/LSU/d, it's the value used by FAO, ICARDA and more Version 3.2.5 Moving window algorithm corrected. Moving window length set to 30 yr. Version 3.2.6 Additionally output of soil moisture Version 3.3.0 2010-12-01 This version takes a rectangular Wadiscape as input with non-contiguous habitats of unequal total area. This allows to  use a real landscape. This required, however, random grazing across all habitats. To execute simulations for each region in turn, input '90' as first parameter on the command line.Version 3.3.1 2011-01-05 Changes to spatial output (file name, parameters, order of parameters, frequency) */#include <cmath>#include <sstream>#include "year.h"#include "read_landscape.h"#include "init.h"#include "summary_out.h"const char* when = "before"; /* changes text of column headings of statistical output*/RNG* zZzo;long N_cells = 0, S_cells = 0, W_cells = 0, P_cells = 0;int NZ = 300;      //x-zellenint NS = 300;      //y-zellenfloat perCell = 1.0;int main (int argc, const char * argv[]){   const char* Slope = argv[1];  const int slope = atoi(Slope); // degrees  const char a = 'a';  const char* LID = argc==3?argv[2]:&a;  const int minLandscape = argc==3?atoi(LID):0; // convert char argument to integer  const int maxLandscape = argc==3?atoi(LID):4;// convert char argument to integer  const int minLSU_km2 = 0; // 1 LSU/ha = 100 LSU/km2, 20 LSU/km2 is intense grazing  const int maxLSU_km2 = 0; //100;	const int maxYears = 100; //years_0 + years_CT + years_trans; // till 2050  const int rainWindowYears = 30;    std::stringstream outfile_name;  outfile_name << "annual_stats_" << Slope << "_" << LID <<".txt";	std::stringstream outfile_name2;	outfile_name << "row_stats_" << Slope << "_" << LID <<".txt";	std::stringstream outfile_name3;	outfile_name << "row_stats_1Y_" << Slope << "_" << LID <<".txt";  zZzo = new RNG;  	  std::ofstream ann_stats_header ("annual_stats___.txt", std::ios_base::ate);  if (!ann_stats_header.tellp()) // write only if file is empty  {   ann_stats_header<<"LL.ID\tscenario\tclimate\tLSU\tyear\train\t";  ann_stats_header<<"N mean veg mass before (kg/ha)\t"; ann_stats_header<<"N mean mass consumed (rel)\t"; ann_stats_header<<"N veg cov " << when << "\t"; ann_stats_header<<"N mean ann mass " << when << " (kg/ha)\t"; ann_stats_header<<"N mean ann cov " << when << "\t"; ann_stats_header<<"N mean shrub cov " << when << "\t"; ann_stats_header<<"N cells\tN veg cells (rel)\tN ann cells (rel)\tN shrub cells (rel)\tN bare cells (rel)\t"; if (xst) {   ann_stats_header<<"N SD veg cov " << when << "\t";   ann_stats_header<<"N SD ann mass " << when << " (kg/ha)\t";   ann_stats_header<<"N SD ann cov " << when << "\t";   ann_stats_header<<"N SD shrub cov " << when << "\t"; }  ann_stats_header<<"W mean veg mass before (kg/ha)\t"; ann_stats_header<<"W mean mass consumed (rel)\t"; ann_stats_header<<"W veg cov " << when << "\t"; ann_stats_header<<"W mean ann mass " << when << " (kg/ha)\t"; ann_stats_header<<"W mean ann cov " << when << "\t"; ann_stats_header<<"W mean shrub cov " << when << "\t"; ann_stats_header<<"W cells\tW veg cells (rel)\tW ann cells (rel)\tW shrub cells (rel)\tW bare cells (rel)\t"; if (xst) {   ann_stats_header<<"W SD veg cov " << when << "\t";   ann_stats_header<<"W SD ann mass " << when << " (kg/ha)\t";   ann_stats_header<<"W SD ann cov " << when << "\t";   ann_stats_header<<"W SD shrub cov " << when << "\t"; }  ann_stats_header<<"S mean veg mass before (kg/ha)\t"; ann_stats_header<<"S mean mass consumed (rel)\t"; ann_stats_header<<"S veg cov " << when << "\t"; ann_stats_header<<"S mean ann mass " << when << " (kg/ha)\t"; ann_stats_header<<"S mean ann cov " << when << "\t"; ann_stats_header<<"S mean shrub cov " << when << "\t"; ann_stats_header<<"S cells\tS veg cells (rel)\tS ann cells (rel)\tS shrub cells (rel)\tS bare cells (rel)\t"; if (xst) {   ann_stats_header<<"S SD veg cov " << when << "\t";   ann_stats_header<<"S SD ann mass " << when << " (kg/ha)\t";   ann_stats_header<<"S SD ann cov " << when << "\t";   ann_stats_header<<"S SD shrub cov " << when << "\t"; } ann_stats_header<<"P mean veg mass before (kg/ha)\t"; ann_stats_header<<"P mean mass consumed (rel)\t"; ann_stats_header<<"P veg cov " << when << "\t"; ann_stats_header<<"P mean ann mass " << when << " (kg/ha)\t"; ann_stats_header<<"P mean ann cov " << when << "\t"; ann_stats_header<<"P mean shrub cov " << when << "\t"; ann_stats_header<<"P cells\tP veg cells (rel)\tP ann cells (rel)\tP shrub cells (rel)\tP bare cells (rel)"; if (xst) {   ann_stats_header << "\t";   ann_stats_header<<"P SD veg cov " << when << "\t";   ann_stats_header<<"P SD ann mass " << when << " (kg/ha)\t";   ann_stats_header<<"P SD ann cov " << when << "\t";   ann_stats_header<<"P SD shrub cov " << when; } ann_stats_header<<std::endl;  } ann_stats_header.close(); std::ofstream ann_stats (outfile_name.str().c_str(), std::ios_base::app);   for (int ll=minLandscape; ll<= maxLandscape; ll++)  {		  WATER* W;	read_landscape(W, ll, slope);	initialize(W);	VEGETATION::S_ann_mass.resize(S_cells); 	VEGETATION::S_shrub_cov.resize(S_cells); 	VEGETATION::S_ann_cov.resize(S_cells); 	VEGETATION::S_veg_cov.resize(S_cells); 	VEGETATION::N_ann_mass.resize(N_cells); 	VEGETATION::N_shrub_cov.resize(N_cells); 	VEGETATION::N_ann_cov.resize(N_cells); 	VEGETATION::N_veg_cov.resize(N_cells); 	VEGETATION::W_ann_mass.resize(W_cells); 	VEGETATION::W_shrub_cov.resize(W_cells); 	VEGETATION::W_ann_cov.resize(W_cells); 	VEGETATION::W_veg_cov.resize(W_cells); 	VEGETATION::P_ann_mass.resize(P_cells); 	VEGETATION::P_shrub_cov.resize(P_cells); 	VEGETATION::P_ann_cov.resize(P_cells); 	VEGETATION::P_veg_cov.resize(P_cells); 		for (scenario_names scenario = A1B; scenario <= A1B; ++scenario) // v 3.2.3t	{	for (climate_names climate = climate_names(int(ll)); climate <=climate_names(int(ll)); ++climate)	{ 		if(climate==drymed) continue;	  RGCM rain(climate, scenario, rainWindowYears); // choose an appropriate source for timep series of rain	  	  int step = 1;	  // ### remove this part for variable stocking rate	  for (int LSU_km2 = minLSU_km2; LSU_km2 <= maxLSU_km2; LSU_km2 += step)	  {        std::cout<< "landscape: " << ll << "\tscenario: " << scenario << "\tclimate: " << climate << std::endl;        std::cout<< "\t\t\tLSU/km2: " << LSU_km2 << std::endl;		if (LSU_km2 == 50)		  step = 2;		if (LSU_km2 == 70)		  step = 5;		if (LSU_km2 == 80)		  step = 10;		// ### end remove; don't forget to also remove the end-for brace//	  float LSU_km2 = 30; // for variable stocking scenario	  		// rain.draw_series(); removed in v3.2.4 because it is not needed with RGCM time series				VEGETATION* V = new VEGETATION[NZ*NS];				for (int yy = 0; yy < maxYears; yy++)		{        if (yy%10 == 0) std::cout<< "\t\t\t\tyear: " << 1961-years_0+yy << std::endl;		  VEGETATION::S_shrub_cov = 0.0;		  VEGETATION::N_shrub_cov = 0.0;		  VEGETATION::W_shrub_cov = 0.0;		  VEGETATION::P_shrub_cov = 0.0;		  VEGETATION::S_ann_mass = 0.0;		  VEGETATION::N_ann_mass = 0.0;		  VEGETATION::W_ann_mass = 0.0;		  VEGETATION::P_ann_mass = 0.0;		  VEGETATION::S_ann_cov = 0.0;		  VEGETATION::N_ann_cov = 0.0;		  VEGETATION::W_ann_cov = 0.0;		  VEGETATION::P_ann_cov = 0.0;		  VEGETATION::S_veg_cov = 0.0;		  VEGETATION::N_veg_cov = 0.0;		  VEGETATION::W_veg_cov = 0.0;		  VEGETATION::P_veg_cov = 0.0;		  		  rain.drawYear(yy, rainWindowYears); // added in v.3.2.4		  float year_rain = rain.getAnnualRain(yy); // changed in v.3.2.4//		  if (yy > years_0 + years_CT+20) LSU_km2 = 0; // for variable stocking scenario			year(W, V, climate, yy < years_0/2 ? 0.0 : LSU_km2/100.0, year_rain);		  //----- detailed output to screen for testing		/*for (int iz = 0; iz<NZ; iz++)		  for (int is = 0; is<NS; is++)			std::cout<< iz << "\t" << is << "\t" << ll << "\t" << climate << "\t" << float(LSU_km2/100.0) << "\t" << yy<< "\t" << V[iz*NZ+is].ann_mass_kg_cell << "\t" << V[iz*NZ+is].shrub_cov << "\t" << W[iz*NZ+is].habitat << "\t" << W[iz*NZ+is].avail_rel << std::endl;		*/  		//		  if (yy >= years_0)//		  if (yy >= years_0+years_CT+years_trans)		if (yy >= 0)		  			{			annual_summary_output(ll, climate, yy, LSU_km2, year_rain, scenario, outfile_name.str().c_str());				if ((yy-years_0 == 0) || (yy-years_0 == 1990-1961) || (yy-years_0 == 2025-1961) || (yy-years_0 == 2050-1961)) 				//if(yy%5 == 0)				annual_spatial_output(ll, climate, yy, LSU_km2, year_rain, scenario, outfile_name2.str().c_str(), W, V);		  }		if (yy==0)				one_year_spatial_output(ll, climate, yy, LSU_km2, year_rain, scenario, outfile_name3.str().c_str(), W, V);					} // end for yy year		delete[] V;	  } // end for lsu	} // end for cc region	} // end for climate scenario	  delete[] W;	    }// end for ll  	    return 0;}